#This Code test our Hexp_Welchp function gives mean and var
#of the estimate Hurst exponent
import sys
sys.path.append('/volatile/hubert/HCode/')
import scipy.io as scio
import numpy as np
import matplotlib.pyplot as plt
from Estimators.Hexp_Welchp import Hurstexp_Welchper as HW

f = scio.loadmat('/volatile/hubert/datas/simulations/simulationsfGn2.mat')

simulations = f['simulations']
#number of different h
n = simulations.shape[0]
#number of simulation for a given h
N = simulations.shape[1]
#length of simulation
l = simulations.shape[2]

estimate = np.zeros((n,N))

for i in np.arange(0,n):
  estimate[i]=HW(simulations[i,:,:])

  
s ='Welch_nitime_per'
f = open('/volatile/hubert/datas/simulations/Python_'+s+'_results514_norm','w')



fig = plt.figure(100)
bp = plt.boxplot(estimate.T, labels=np.arange(1,10)/10.)
plt.title('Estimation of Hurst\ncoeffician of fGn by\n'+s+'method')
k=0
for line in bp['medians']:
  # get position data for median line
  x, y = line.get_xydata()[1] # top of median line overlay median value
  if(k <6):
    plt.text(x+0.4, y-0.02, '%.3f\n%.3e' % (np.mean(estimate[k,:]),
					    np.var(estimate[k,:])),
    horizontalalignment='center') # draw above, centered
  else:
    plt.text(x-0.8, y-0.02, '%.3f\n%.3e' % (np.mean(estimate[k,:]),
					  np.var(estimate[k,:])),
	horizontalalignment='center') # draw above, centered
  k = k+1


f, myplots = plt.subplots(1,4,sharey=True)
for cle,valeur in donnees.items():
  if '514' in cle:
    bp = myplots[j].boxplot(valeur.T, labels=np.arange(1,10)/10.)
    myplots[j].set_title('Estimation of Hurst\ncoeffician of fGn by\n'+cle+'method')
    
    for line in bp['medians']:
      # get position data for median line
      x, y = line.get_xydata()[1] # top of median line
      # overlay median value
      if(k <6):
	myplots[j].text(x+1.5, y-0.02, '%.3f\n%.3e' % (np.mean(valeur[k,:]),
					       np.var(valeur[k,:])),
	horizontalalignment='center') # draw above, centered
      else:
	myplots[j].text(x-2, y-0.02, '%.3f\n%.3e' % (np.mean(valeur[k,:]),
					      np.var(valeur[k,:])),
	    horizontalalignment='center') # draw above, centered
      k = k+1
    k=0
    j = j+1
